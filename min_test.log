I0225 14:00:21.361908 20262 caffe.cpp:217] Using GPUs 0
I0225 14:00:21.388862 20262 caffe.cpp:222] GPU 0: GeForce GTX 1060
I0225 14:00:21.618561 20262 solver.cpp:48] Initializing solver from parameters: 
test_iter: 100
test_interval: 545
base_lr: 0.0022
display: 50
max_iter: 5450
lr_policy: "step"
gamma: 0.1
momentum: 0.9
weight_decay: 0.005
stepsize: 1090
snapshot: 545
snapshot_prefix: "mini_test"
solver_mode: GPU
device_id: 0
net: "train_test.prototxt"
train_state {
  level: 0
  stage: ""
}
test_state {
  stage: "test-on-val"
}
I0225 14:00:21.618754 20262 solver.cpp:91] Creating training net from net file: train_test.prototxt
I0225 14:00:21.619565 20262 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer data
I0225 14:00:21.619645 20262 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer prob
I0225 14:00:21.619648 20262 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0225 14:00:21.619650 20262 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0225 14:00:21.620049 20262 net.cpp:58] Initializing net from parameters: 
name: "c3d_mini"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "data"
  type: "Data"
  top: "pair_data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    mirror: true
    crop_size: 112
    mean_value: 90
    mean_value: 98
    mean_value: 102
  }
  data_param {
    source: "../LMDB/train"
    batch_size: 50
    backend: LMDB
  }
}
layer {
  name: "slice_pair"
  type: "Slice"
  bottom: "pair_data"
  top: "data_stacked_fp"
  top: "data_stacked_tp"
  slice_param {
    slice_dim: 1
    slice_point: 48
  }
}
layer {
  name: "reshape_fp"
  type: "Reshape"
  bottom: "data_stacked_fp"
  top: "data_fp"
  reshape_param {
    shape {
      dim: 0
      dim: 3
      dim: 16
      dim: 112
      dim: 112
    }
  }
}
layer {
  name: "reshape_tp"
  type: "Reshape"
  bottom: "data_stacked_tp"
  top: "data_tp"
  reshape_param {
    shape {
      dim: 0
      dim: 3
      dim: 16
      dim: 112
      dim: 112
    }
  }
}
layer {
  name: "conv1a_fp"
  type: "NdConvolution"
  bottom: "data_fp"
  top: "conv1a_fp"
  param {
    name: "conv1a_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv1a_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    pad_shape {
      dim: 1
      dim: 1
      dim: 1
    }
    kernel_shape {
      dim: 3
      dim: 3
      dim: 3
    }
    stride_shape {
      dim: 1
      dim: 1
      dim: 1
    }
  }
}
layer {
  name: "relu1a_fp"
  type: "ReLU"
  bottom: "conv1a_fp"
  top: "conv1a_fp"
}
layer {
  name: "pool1_fp"
  type: "NdPooling"
  bottom: "conv1a_fp"
  top: "pool1_fp"
  pooling_param {
    pool: MAX
    kernel_shape {
      dim: 1
      dim: 2
      dim: 2
    }
    stride_shape {
      dim: 1
      dim: 2
      dim: 2
    }
  }
}
layer {
  name: "conv2a_fp"
  type: "NdConvolution"
  bottom: "pool1_fp"
  top: "conv2a_fp"
  param {
    name: "conv2a_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv2a_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
    pad_shape {
      dim: 1
      dim: 1
      dim: 1
    }
    kernel_shape {
      dim: 3
      dim: 3
      dim: 3
    }
    stride_shape {
      dim: 1
      dim: 1
      dim: 1
    }
  }
}
layer {
  name: "relu2a_fp"
  type: "ReLU"
  bottom: "conv2a_fp"
  top: "conv2a_fp"
}
layer {
  name: "pool2_fp"
  type: "NdPooling"
  bottom: "conv2a_fp"
  top: "pool2_fp"
  pooling_param {
    pool: MAX
    kernel_shape {
      dim: 2
      dim: 2
      dim: 2
    }
    stride_shape {
      dim: 2
      dim: 2
      dim: 2
    }
  }
}
layer {
  name: "conv3a_fp"
  type: "NdConvolution"
  bottom: "pool2_fp"
  top: "conv3a_fp"
  param {
    name: "conv3a_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv3a_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
    pad_shape {
      dim: 1
      dim: 1
      dim: 1
    }
    kernel_shape {
      dim: 3
      dim: 3
      dim: 3
    }
    stride_shape {
      dim: 1
      dim: 1
      dim: 1
    }
  }
}
layer {
  name: "relu3a_fp"
  type: "ReLU"
  bottom: "conv3a_fp"
  top: "conv3a_fp"
}
layer {
  name: "conv3b_fp"
  type: "NdConvolution"
  bottom: "conv3a_fp"
  top: "conv3b_fp"
  param {
    name: "conv3b_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv3b_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
    pad_shape {
      dim: 1
      dim: 1
      dim: 1
    }
    kernel_shape {
      dim: 3
      dim: 3
      dim: 3
    }
    stride_shape {
      dim: 1
      dim: 1
      dim: 1
    }
  }
}
layer {
  name: "relu3b_fp"
  type: "ReLU"
  bottom: "conv3b_fp"
  top: "conv3b_fp"
}
layer {
  name: "pool3_fp"
  type: "NdPooling"
  bottom: "conv3b_fp"
  top: "pool3_fp"
  pooling_param {
    pool: MAX
    kernel_shape {
      dim: 2
      dim: 2
      dim: 2
    }
    stride_shape {
      dim: 2
      dim: 2
      dim: 2
    }
  }
}
layer {
  name: "conv4a_fp"
  type: "NdConvolution"
  bottom: "pool3_fp"
  top: "conv4a_fp"
  param {
    name: "conv4a_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv4a_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
    pad_shape {
      dim: 1
      dim: 1
      dim: 1
    }
    kernel_shape {
      dim: 3
      dim: 3
      dim: 3
    }
    stride_shape {
      dim: 1
      dim: 1
      dim: 1
    }
  }
}
layer {
  name: "relu4a_fp"
  type: "ReLU"
  bottom: "conv4a_fp"
  top: "conv4a_fp"
}
layer {
  name: "conv4b_fp"
  type: "NdConvolution"
  bottom: "conv4a_fp"
  top: "conv4b_fp"
  param {
    name: "conv4b_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv4b_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
    pad_shape {
      dim: 1
      dim: 1
      dim: 1
    }
    kernel_shape {
      dim: 3
      dim: 3
      dim: 3
    }
    stride_shape {
      dim: 1
      dim: 1
      dim: 1
    }
  }
}
layer {
  name: "relu4b_fp"
  type: "ReLU"
  bottom: "conv4b_fp"
  top: "conv4b_fp"
}
layer {
  name: "pool4_fp"
  type: "NdPooling"
  bottom: "conv4b_fp"
  top: "pool4_fp"
  pooling_param {
    pool: MAX
    kernel_shape {
      dim: 2
      dim: 2
      dim: 2
    }
    stride_shape {
      dim: 2
      dim: 2
      dim: 2
    }
  }
}
layer {
  name: "conv5a_fp"
  type: "NdConvolution"
  bottom: "pool4_fp"
  top: "conv5a_fp"
  param {
    name: "conv5a_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv5a_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
    pad_shape {
      dim: 1
      dim: 1
      dim: 1
    }
    kernel_shape {
      dim: 3
      dim: 3
      dim: 3
    }
    stride_shape {
      dim: 1
      dim: 1
      dim: 1
    }
  }
}
layer {
  name: "relu5a_fp"
  type: "ReLU"
  bottom: "conv5a_fp"
  top: "conv5a_fp"
}
layer {
  name: "conv5b_fp"
  type: "NdConvolution"
  bottom: "conv5a_fp"
  top: "conv5b_fp"
  param {
    name: "conv5b_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv5b_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
    pad_shape {
      dim: 1
      dim: 1
      dim: 1
    }
    kernel_shape {
      dim: 3
      dim: 3
      dim: 3
    }
    stride_shape {
      dim: 1
      dim: 1
      dim: 1
    }
  }
}
layer {
  name: "relu5b_fp"
  type: "ReLU"
  bottom: "conv5b_fp"
  top: "conv5b_fp"
}
layer {
  name: "pool5_fp"
  type: "NdPooling"
  bottom: "conv5b_fp"
  top: "pool5_fp"
  pooling_param {
    pool: MAX
    kernel_shape {
      dim: 2
      dim: 2
      dim: 2
    }
    stride_shape {
      dim: 2
      dim: 2
      dim: 2
    }
  }
}
layer {
  name: "fc6_fp"
  type: "InnerProduct"
  bottom: "pool5_fp"
  top: "fc6_fp"
  param {
    name: "fc6_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "fc6_b"
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu6_fp"
  type: "ReLU"
  bottom: "fc6_fp"
  top: "fc6_fp"
}
layer {
  name: "drop6_fp"
  type: "Dropout"
  bottom: "fc6_fp"
  top: "fc6_fp"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7_fp"
  type: "InnerProduct"
  bottom: "fc6_fp"
  top: "fc7_fp"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu7_fp"
  type: "ReLU"
  bottom: "fc7_fp"
  top: "fc7_fp"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7_fp"
  top: "fc7_fp"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "conv1a_tp"
  type: "NdConvolution"
  bottom: "data_tp"
  top: "conv1a_tp"
  param {
    name: "conv1a_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv1a_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    pad_shape {
      dim: 1
      dim: 1
      dim: 1
    }
    kernel_shape {
      dim: 3
      dim: 3
      dim: 3
    }
    stride_shape {
      dim: 1
      dim: 1
      dim: 1
    }
  }
}
layer {
  name: "relu1a_tp"
  type: "ReLU"
  bottom: "conv1a_tp"
  top: "conv1a_tp"
}
layer {
  name: "pool1_tp"
  type: "NdPooling"
  bottom: "conv1a_tp"
  top: "pool1_tp"
  pooling_param {
    pool: MAX
    kernel_shape {
      dim: 1
      dim: 2
      dim: 2
    }
    stride_shape {
      dim: 1
      dim: 2
      dim: 2
    }
  }
}
layer {
  name: "conv2a_tp"
  type: "NdConvolution"
  bottom: "pool1_tp"
  top: "conv2a_tp"
  param {
    name: "conv2a_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv2a_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
    pad_shape {
      dim: 1
      dim: 1
      dim: 1
    }
    kernel_shape {
      dim: 3
      dim: 3
      dim: 3
    }
    stride_shape {
      dim: 1
      dim: 1
      dim: 1
    }
  }
}
layer {
  name: "relu2a_tp"
  type: "ReLU"
  bottom: "conv2a_tp"
  top: "conv2a_tp"
}
layer {
  name: "pool2_tp"
  type: "NdPooling"
  bottom: "conv2a_tp"
  top: "pool2_tp"
  pooling_param {
    pool: MAX
    kernel_shape {
      dim: 2
      dim: 2
      dim: 2
    }
    stride_shape {
      dim: 2
      dim: 2
      dim: 2
    }
  }
}
layer {
  name: "conv3a_tp"
  type: "NdConvolution"
  bottom: "pool2_tp"
  top: "conv3a_tp"
  param {
    name: "conv3a_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv3a_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
    pad_shape {
      dim: 1
      dim: 1
      dim: 1
    }
    kernel_shape {
      dim: 3
      dim: 3
      dim: 3
    }
    stride_shape {
      dim: 1
      dim: 1
      dim: 1
    }
  }
}
layer {
  name: "relu3a_tp"
  type: "ReLU"
  bottom: "conv3a_tp"
  top: "conv3a_tp"
}
layer {
  name: "conv3b_tp"
  type: "NdConvolution"
  bottom: "conv3a_tp"
  top: "conv3b_tp"
  param {
    name: "conv3b_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv3b_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
    pad_shape {
      dim: 1
      dim: 1
      dim: 1
    }
    kernel_shape {
      dim: 3
      dim: 3
      dim: 3
    }
    stride_shape {
      dim: 1
      dim: 1
      dim: 1
    }
  }
}
layer {
  name: "relu3b_tp"
  type: "ReLU"
  bottom: "conv3b_tp"
  top: "conv3b_tp"
}
layer {
  name: "pool3_tp"
  type: "NdPooling"
  bottom: "conv3b_tp"
  top: "pool3_tp"
  pooling_param {
    pool: MAX
    kernel_shape {
      dim: 2
      dim: 2
      dim: 2
    }
    stride_shape {
      dim: 2
      dim: 2
      dim: 2
    }
  }
}
layer {
  name: "conv4a_tp"
  type: "NdConvolution"
  bottom: "pool3_tp"
  top: "conv4a_tp"
  param {
    name: "conv4a_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv4a_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
    pad_shape {
      dim: 1
      dim: 1
      dim: 1
    }
    kernel_shape {
      dim: 3
      dim: 3
      dim: 3
    }
    stride_shape {
      dim: 1
      dim: 1
      dim: 1
    }
  }
}
layer {
  name: "relu4a_tp"
  type: "ReLU"
  bottom: "conv4a_tp"
  top: "conv4a_tp"
}
layer {
  name: "conv4b_tp"
  type: "NdConvolution"
  bottom: "conv4a_tp"
  top: "conv4b_tp"
  param {
    name: "conv4b_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv4b_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
    pad_shape {
      dim: 1
      dim: 1
      dim: 1
    }
    kernel_shape {
      dim: 3
      dim: 3
      dim: 3
    }
    stride_shape {
      dim: 1
      dim: 1
      dim: 1
    }
  }
}
layer {
  name: "relu4b_tp"
  type: "ReLU"
  bottom: "conv4b_tp"
  top: "conv4b_tp"
}
layer {
  name: "pool4_tp"
  type: "NdPooling"
  bottom: "conv4b_tp"
  top: "pool4_tp"
  pooling_param {
    pool: MAX
    kernel_shape {
      dim: 2
      dim: 2
      dim: 2
    }
    stride_shape {
      dim: 2
      dim: 2
      dim: 2
    }
  }
}
layer {
  name: "conv5a_tp"
  type: "NdConvolution"
  bottom: "pool4_tp"
  top: "conv5a_tp"
  param {
    name: "conv5a_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv5a_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
    pad_shape {
      dim: 1
      dim: 1
      dim: 1
    }
    kernel_shape {
      dim: 3
      dim: 3
      dim: 3
    }
    stride_shape {
      dim: 1
      dim: 1
      dim: 1
    }
  }
}
layer {
  name: "relu5a_tp"
  type: "ReLU"
  bottom: "conv5a_tp"
  top: "conv5a_tp"
}
layer {
  name: "conv5b_tp"
  type: "NdConvolution"
  bottom: "conv5a_tp"
  top: "conv5b_tp"
  param {
    name: "conv5b_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv5b_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
    pad_shape {
      dim: 1
      dim: 1
      dim: 1
    }
    kernel_shape {
      dim: 3
      dim: 3
      dim: 3
    }
    stride_shape {
      dim: 1
      dim: 1
      dim: 1
    }
  }
}
layer {
  name: "relu5b_tp"
  type: "ReLU"
  bottom: "conv5b_tp"
  top: "conv5b_tp"
}
layer {
  name: "pool5_tp"
  type: "NdPooling"
  bottom: "conv5b_tp"
  top: "pool5_tp"
  pooling_param {
    pool: MAX
    kernel_shape {
      dim: 2
      dim: 2
      dim: 2
    }
    stride_shape {
      dim: 2
      dim: 2
      dim: 2
    }
  }
}
layer {
  name: "fc6_tp"
  type: "InnerProduct"
  bottom: "pool5_tp"
  top: "fc6_tp"
  param {
    name: "fc6_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "fc6_b"
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu6_tp"
  type: "ReLU"
  bottom: "fc6_tp"
  top: "fc6_tp"
}
layer {
  name: "drop6_tp"
  type: "Dropout"
  bottom: "fc6_tp"
  top: "fc6_tp"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7_tp"
  type: "InnerProduct"
  bottom: "fc6_tp"
  top: "fc7_tp"
  param {
    name: "fc7_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "fc7_b"
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu7_tp"
  type: "ReLU"
  bottom: "fc7_tp"
  top: "fc7_tp"
}
layer {
  name: "drop7_tp"
  type: "Dropout"
  bottom: "fc7_tp"
  top: "fc7_tp"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "loss"
  type: "ContrastiveLoss"
  bottom: "fc7_fp"
  bottom: "fc7_tp"
  bottom: "label"
  top: "loss"
  contrastive_loss_param {
    margin: 1
  }
}
I0225 14:00:21.620281 20262 layer_factory.hpp:77] Creating layer data
I0225 14:00:21.620815 20262 net.cpp:100] Creating Layer data
I0225 14:00:21.620826 20262 net.cpp:408] data -> pair_data
I0225 14:00:21.620851 20262 net.cpp:408] data -> label
I0225 14:00:21.621951 20270 db_lmdb.cpp:35] Opened lmdb ../LMDB/train
I0225 14:00:21.631387 20262 data_layer.cpp:41] output data size: 50,96,112,112
I0225 14:00:21.881850 20262 net.cpp:150] Setting up data
I0225 14:00:21.881886 20262 net.cpp:157] Top shape: 50 96 112 112 (60211200)
I0225 14:00:21.881891 20262 net.cpp:157] Top shape: 50 (50)
I0225 14:00:21.881894 20262 net.cpp:165] Memory required for data: 240845000
I0225 14:00:21.881916 20262 layer_factory.hpp:77] Creating layer slice_pair
I0225 14:00:21.881933 20262 net.cpp:100] Creating Layer slice_pair
I0225 14:00:21.881942 20262 net.cpp:434] slice_pair <- pair_data
I0225 14:00:21.881970 20262 net.cpp:408] slice_pair -> data_stacked_fp
I0225 14:00:21.882010 20262 net.cpp:408] slice_pair -> data_stacked_tp
I0225 14:00:21.882071 20262 net.cpp:150] Setting up slice_pair
I0225 14:00:21.882081 20262 net.cpp:157] Top shape: 50 48 112 112 (30105600)
I0225 14:00:21.882086 20262 net.cpp:157] Top shape: 50 48 112 112 (30105600)
I0225 14:00:21.882102 20262 net.cpp:165] Memory required for data: 481689800
I0225 14:00:21.882107 20262 layer_factory.hpp:77] Creating layer reshape_fp
I0225 14:00:21.882115 20262 net.cpp:100] Creating Layer reshape_fp
I0225 14:00:21.882122 20262 net.cpp:434] reshape_fp <- data_stacked_fp
I0225 14:00:21.882128 20262 net.cpp:408] reshape_fp -> data_fp
I0225 14:00:21.882160 20262 net.cpp:150] Setting up reshape_fp
I0225 14:00:21.882169 20262 net.cpp:157] Top shape: 50 3 16 112 112 (30105600)
I0225 14:00:21.882172 20262 net.cpp:165] Memory required for data: 602112200
I0225 14:00:21.882176 20262 layer_factory.hpp:77] Creating layer reshape_tp
I0225 14:00:21.882182 20262 net.cpp:100] Creating Layer reshape_tp
I0225 14:00:21.882186 20262 net.cpp:434] reshape_tp <- data_stacked_tp
I0225 14:00:21.882194 20262 net.cpp:408] reshape_tp -> data_tp
I0225 14:00:21.882217 20262 net.cpp:150] Setting up reshape_tp
I0225 14:00:21.882223 20262 net.cpp:157] Top shape: 50 3 16 112 112 (30105600)
I0225 14:00:21.882226 20262 net.cpp:165] Memory required for data: 722534600
I0225 14:00:21.882230 20262 layer_factory.hpp:77] Creating layer conv1a_fp
I0225 14:00:21.882243 20262 net.cpp:100] Creating Layer conv1a_fp
I0225 14:00:21.882247 20262 net.cpp:434] conv1a_fp <- data_fp
I0225 14:00:21.882268 20262 net.cpp:408] conv1a_fp -> conv1a_fp
F0225 14:00:21.905109 20273 data_transformer.cpp:68] Check failed: mean_values_.size() == 1 || mean_values_.size() == datum_channels Specify either 1 mean_value or as many as channels: 96
*** Check failure stack trace: ***
    @     0x7f3cd67765cd  google::LogMessage::Fail()
    @     0x7f3cd6778433  google::LogMessage::SendToLog()
    @     0x7f3cd677615b  google::LogMessage::Flush()
    @     0x7f3cd6778e1e  google::LogMessageFatal::~LogMessageFatal()
    @     0x7f3cd6d8f140  caffe::DataTransformer<>::Transform()
    @     0x7f3cd6d91717  caffe::DataTransformer<>::Transform()
    @     0x7f3cd6e5cbfd  caffe::DataLayer<>::load_batch()
    @     0x7f3cd6ddfbdb  caffe::BasePrefetchingDataLayer<>::InternalThreadEntry()
    @     0x7f3cd6d05755  caffe::InternalThread::entry()
    @     0x7f3cd4a545d5  (unknown)
    @     0x7f3cd482d6ba  start_thread
    @     0x7f3cd4d6f82d  clone
    @              (nil)  (unknown)
