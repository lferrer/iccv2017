I0224 21:54:12.137753  3081 caffe.cpp:217] Using GPUs 0
I0224 21:54:12.161008  3081 caffe.cpp:222] GPU 0: GeForce GTX 1060
I0224 21:54:12.388141  3081 solver.cpp:48] Initializing solver from parameters: 
test_iter: 100
test_interval: 545
base_lr: 0.0022
display: 50
max_iter: 5450
lr_policy: "step"
gamma: 0.1
momentum: 0.9
weight_decay: 0.005
stepsize: 1090
snapshot: 545
snapshot_prefix: "mini_test"
solver_mode: GPU
device_id: 0
net: "train_test.prototxt"
train_state {
  level: 0
  stage: ""
}
test_state {
  stage: "test-on-val"
}
I0224 21:54:12.388329  3081 solver.cpp:91] Creating training net from net file: train_test.prototxt
I0224 21:54:12.388711  3081 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer data
I0224 21:54:12.388751  3081 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer prob
I0224 21:54:12.388753  3081 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0224 21:54:12.388756  3081 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0224 21:54:12.388986  3081 net.cpp:58] Initializing net from parameters: 
name: "c3d_mini"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "data"
  type: "Data"
  top: "pair_data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    mirror: true
    crop_size: 112
    mean_value: 90
    mean_value: 98
    mean_value: 102
  }
  data_param {
    source: "../LMDB/train"
    batch_size: 50
    backend: LMDB
  }
}
layer {
  name: "slice_pair"
  type: "Slice"
  bottom: "pair_data"
  top: "data"
  top: "data_p"
  slice_param {
    slice_dim: 1
    slice_point: 3
  }
}
layer {
  name: "conv1a"
  type: "NdConvolution"
  bottom: "data"
  top: "conv1a"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    pad_shape {
      dim: 1
      dim: 1
      dim: 1
    }
    kernel_shape {
      dim: 3
      dim: 3
      dim: 3
    }
    stride_shape {
      dim: 1
      dim: 1
      dim: 1
    }
  }
}
layer {
  name: "relu1a"
  type: "ReLU"
  bottom: "conv1a"
  top: "conv1a"
}
layer {
  name: "pool1"
  type: "NdPooling"
  bottom: "conv1a"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_shape {
      dim: 1
      dim: 2
      dim: 2
    }
    stride_shape {
      dim: 1
      dim: 2
      dim: 2
    }
  }
}
layer {
  name: "conv2a"
  type: "NdConvolution"
  bottom: "pool1"
  top: "conv2a"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
    pad_shape {
      dim: 1
      dim: 1
      dim: 1
    }
    kernel_shape {
      dim: 3
      dim: 3
      dim: 3
    }
    stride_shape {
      dim: 1
      dim: 1
      dim: 1
    }
  }
}
layer {
  name: "relu2a"
  type: "ReLU"
  bottom: "conv2a"
  top: "conv2a"
}
layer {
  name: "pool2"
  type: "NdPooling"
  bottom: "conv2a"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_shape {
      dim: 2
      dim: 2
      dim: 2
    }
    stride_shape {
      dim: 2
      dim: 2
      dim: 2
    }
  }
}
layer {
  name: "conv3a"
  type: "NdConvolution"
  bottom: "pool2"
  top: "conv3a"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
    pad_shape {
      dim: 1
      dim: 1
      dim: 1
    }
    kernel_shape {
      dim: 3
      dim: 3
      dim: 3
    }
    stride_shape {
      dim: 1
      dim: 1
      dim: 1
    }
  }
}
layer {
  name: "relu3a"
  type: "ReLU"
  bottom: "conv3a"
  top: "conv3a"
}
layer {
  name: "pool3"
  type: "NdPooling"
  bottom: "conv3a"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_shape {
      dim: 2
      dim: 2
      dim: 2
    }
    stride_shape {
      dim: 2
      dim: 2
      dim: 2
    }
  }
}
layer {
  name: "conv4a"
  type: "NdConvolution"
  bottom: "pool3"
  top: "conv4a"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
    pad_shape {
      dim: 1
      dim: 1
      dim: 1
    }
    kernel_shape {
      dim: 3
      dim: 3
      dim: 3
    }
    stride_shape {
      dim: 1
      dim: 1
      dim: 1
    }
  }
}
layer {
  name: "relu4a"
  type: "ReLU"
  bottom: "conv4a"
  top: "conv4a"
}
layer {
  name: "pool4"
  type: "NdPooling"
  bottom: "conv4a"
  top: "pool4"
  pooling_param {
    pool: MAX
    kernel_shape {
      dim: 2
      dim: 2
      dim: 2
    }
    stride_shape {
      dim: 2
      dim: 2
      dim: 2
    }
  }
}
layer {
  name: "conv5a"
  type: "NdConvolution"
  bottom: "pool4"
  top: "conv5a"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
    pad_shape {
      dim: 1
      dim: 1
      dim: 1
    }
    kernel_shape {
      dim: 3
      dim: 3
      dim: 3
    }
    stride_shape {
      dim: 1
      dim: 1
      dim: 1
    }
  }
}
layer {
  name: "relu5a"
  type: "ReLU"
  bottom: "conv5a"
  top: "conv5a"
}
layer {
  name: "pool5"
  type: "NdPooling"
  bottom: "conv5a"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_shape {
      dim: 2
      dim: 2
      dim: 2
    }
    stride_shape {
      dim: 2
      dim: 2
      dim: 2
    }
  }
}
layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 2048
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 2048
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc8"
  type: "InnerProduct"
  bottom: "fc7"
  top: "fc8"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 101
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "fc8"
  bottom: "label"
  top: "loss"
}
I0224 21:54:12.389147  3081 layer_factory.hpp:77] Creating layer data
I0224 21:54:12.389742  3081 net.cpp:100] Creating Layer data
I0224 21:54:12.389756  3081 net.cpp:408] data -> pair_data
I0224 21:54:12.389791  3081 net.cpp:408] data -> label
I0224 21:54:12.390647  3090 db_lmdb.cpp:35] Opened lmdb ../LMDB/train
I0224 21:54:12.398538  3081 data_layer.cpp:41] output data size: 50,6,112,112
I0224 21:54:12.415066  3081 net.cpp:150] Setting up data
I0224 21:54:12.415086  3081 net.cpp:157] Top shape: 50 6 112 112 (3763200)
I0224 21:54:12.415091  3081 net.cpp:157] Top shape: 50 (50)
I0224 21:54:12.415092  3081 net.cpp:165] Memory required for data: 15053000
I0224 21:54:12.415102  3081 layer_factory.hpp:77] Creating layer slice_pair
I0224 21:54:12.415130  3081 net.cpp:100] Creating Layer slice_pair
I0224 21:54:12.415134  3081 net.cpp:434] slice_pair <- pair_data
I0224 21:54:12.415146  3081 net.cpp:408] slice_pair -> data
I0224 21:54:12.415156  3081 net.cpp:408] slice_pair -> data_p
I0224 21:54:12.415196  3081 net.cpp:150] Setting up slice_pair
I0224 21:54:12.415201  3081 net.cpp:157] Top shape: 50 3 112 112 (1881600)
I0224 21:54:12.415205  3081 net.cpp:157] Top shape: 50 3 112 112 (1881600)
I0224 21:54:12.415206  3081 net.cpp:165] Memory required for data: 30105800
I0224 21:54:12.415210  3081 layer_factory.hpp:77] Creating layer conv1a
I0224 21:54:12.415220  3081 net.cpp:100] Creating Layer conv1a
I0224 21:54:12.415223  3081 net.cpp:434] conv1a <- data
I0224 21:54:12.415228  3081 net.cpp:408] conv1a -> conv1a
F0224 21:54:12.417629  3091 data_transformer.cpp:68] Check failed: mean_values_.size() == 1 || mean_values_.size() == datum_channels Specify either 1 mean_value or as many as channels: 6
*** Check failure stack trace: ***
    @     0x7f52f466f5cd  google::LogMessage::Fail()
    @     0x7f52f4671433  google::LogMessage::SendToLog()
    @     0x7f52f466f15b  google::LogMessage::Flush()
    @     0x7f52f4671e1e  google::LogMessageFatal::~LogMessageFatal()
    @     0x7f52f4c88140  caffe::DataTransformer<>::Transform()
    @     0x7f52f4c8a717  caffe::DataTransformer<>::Transform()
    @     0x7f52f4d55bfd  caffe::DataLayer<>::load_batch()
    @     0x7f52f4cd8bdb  caffe::BasePrefetchingDataLayer<>::InternalThreadEntry()
    @     0x7f52f4bfe755  caffe::InternalThread::entry()
    @     0x7f52f294d5d5  (unknown)
    @     0x7f52f27266ba  start_thread
    @     0x7f52f2c6882d  clone
    @              (nil)  (unknown)
